// RobotBuilder Version: 0.0.2
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in th future.
#include "OI.h"
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
#include "SmartDashboard/SmartDashboard.h"
#include "Commands/Autonomous.h"
#include "Commands/ClimbALevel.h"
#include "Commands/DriveWithJoystick.h"
#include "Commands/PlungeKick.h"
#include "Commands/ThrowerOff.h"
#include "Commands/ThrowerOn.h"
#include "Commands/TiltTableAutoSwitchSpeed.h"
#include "Commands/TilterSpeed.h"
#include "Commands/TimedDiscKicker.h"
#include "Commands/TimedDriveStraight.h"
#include "Commands/TimedTilterSpeed.h"
#include "Commands/TimedTurn.h"
#include "Commands/ToggleRobotClimb.h"
#include "Commands/ToggleThrowerPlunger.h"
#include "Commands/DeployPlunger.h"
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
#include "Commands/KickerSpeed.h"
#include "Commands/TiltToAutonomousTarget.h"
#include "Commands/HangOn.h"
OI::OI() {
	// Process operator interface input here.
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
	joystick2 = new Joystick(2);
	
	joystick1 = new Joystick(1);
	
     
        // SmartDashboard Buttons
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
	
	m_ATK3B6 = new JoystickButton(joystick1, 6);
	m_ATK3B7 = new JoystickButton(joystick1, 7);
	
	m_dualActionB1 = new JoystickButton(joystick2, 1);
	m_dualActionB2 = new JoystickButton(joystick2, 2);
	m_dualActionB3 = new JoystickButton(joystick2, 3);
	m_dualActionB4 = new JoystickButton(joystick2, 4);
	m_dualActionB5 = new JoystickButton(joystick2, 5);
	m_dualActionB6 = new JoystickButton(joystick2, 6);
	m_dualActionB7 = new JoystickButton(joystick2, 7);
	m_dualActionB8 = new JoystickButton(joystick2, 8);
	m_dualActionB10 = new JoystickButton(joystick2, 10);
	
	// THIS IS THE COMPETITION CODE
	
	// This runs until it hits the (hardwired) down limit switch.
	// Speed can be adjusted here.
	m_ATK3B6->WhenPressed(new TilterSpeed(0.7)); //down
	
	// HangOn turns on the pneumatics and the tilt table motor to
	// hang the robot on the lowest rung of the pyramid.  The motor
	// speed can be adjusted here.
	m_ATK3B7->WhileHeld(new TilterSpeed(-0.8)); // tilt up
	
	// TimedTurn takes the timeout value and whether it is a right turn
	// as arguments.  If the nudge needs adjustment, there are two things to
	// consider -- the timeout (didn't run long enough) or the velocity
	// of the turn (didn't turn fast enough).  The timeout can be changed here,
	// the velocity is hardcoded in the Chassis subsystem.
	m_dualActionB1->WhenPressed(new TimedTurn(0.2, false)); // left
	m_dualActionB3->WhenPressed(new TimedTurn(0.2, true)); // right
	
	// TimedTilterSpeed takes the motorSpeed and timeout as arguments. Both
	// can be adjusted here.
	m_dualActionB2->WhenPressed(new TimedTilterSpeed(0.8, 0.2)); // down
//	m_dualActionB2->WhenPressed(new TimedTilterSpeed(0.8, 0.8)); // down
	m_dualActionB4->WhenPressed(new TimedTilterSpeed(-0.8, 0.2)); // up
	
	// Nothing to change here.  The velocity of the Thrower is set in the
	// ThrowerOn command (100%).
	m_dualActionB5->WhenPressed(new ThrowerOn());
	m_dualActionB7->WhenPressed(new ThrowerOff());
	
	// PlungeKick takes the kickerSpeed as an argument.  There is
	// nothing else to adjust in the command.
	m_dualActionB6->WhileHeld(new PlungeKick(0.3));
	// This works in conjunction with the WhileHeld.  After we
	// have executed the command in while held, we want to return
	// the plunger to the original (extended) position.
	m_dualActionB6->WhenReleased(new DeployPlunger(true));
	
	m_dualActionB8->WhenPressed(new TiltToAutonomousTarget());
	
	
	// This allows us to get the plunger "in sync" should it get out
	// of sync.
	m_dualActionB10->WhenPressed(new ToggleThrowerPlunger());

	
	
	
//	SmartDashboard::PutData("TimedTilterSpeedD20", new TimedTilterSpeed(0.20, 0.1));
//	SmartDashboard::PutData("TimedTilterSpeedD30", new TimedTilterSpeed(0.30, 0.1));
//	SmartDashboard::PutData("TimedTilterSpeedD40", new TimedTilterSpeed(0.40, 0.1));
//	SmartDashboard::PutData("TimedTilterSpeedD50", new TimedTilterSpeed(0.50, 0.1));
//	SmartDashboard::PutData("TimedTilterSpeedD60", new TimedTilterSpeed(0.60, 0.1));
//	SmartDashboard::PutData("TimedTilterSpeedU20", new TimedTilterSpeed(-0.20, 0.1));
//	SmartDashboard::PutData("TimedTilterSpeedU30", new TimedTilterSpeed(-0.30, 0.1));
//	SmartDashboard::PutData("TimedTilterSpeedU40.0.9", new TimedTilterSpeed(-0.40, 0.9));
//	SmartDashboard::PutData("TimedTilterSpeedU40", new TimedTilterSpeed(-0.40, 0.1));
//	SmartDashboard::PutData("TimedTilterSpeedU50", new TimedTilterSpeed(-0.50, 0.1));
//	SmartDashboard::PutData("TimedTilterSpeedU60", new TimedTilterSpeed(-0.60, 0.1));
//	SmartDashboard::PutData("ToggleRobotClimb", new ToggleRobotClimb());
//	SmartDashboard::PutData("Tilter15Down", new TilterSpeed(0.15));
//	SmartDashboard::PutData("Tilter15Up", new TilterSpeed(-0.15));
//	SmartDashboard::PutData("Tilter20Down", new TilterSpeed(0.20));
//	SmartDashboard::PutData("Tilter20Up", new TilterSpeed(-0.20));
//	SmartDashboard::PutData("Tilter25Down", new TilterSpeed(0.25));
//	SmartDashboard::PutData("Tilter25Up", new TilterSpeed(-0.25));
//	SmartDashboard::PutData("Tilter30Down", new TilterSpeed(0.30));
//	SmartDashboard::PutData("Tilter30Up", new TilterSpeed(-0.30));
//	SmartDashboard::PutData("Tilter40Down", new TilterSpeed(0.40));
//	SmartDashboard::PutData("Tilter40Up", new TilterSpeed(-0.40));
//	SmartDashboard::PutData("Tilter50Down", new TilterSpeed(0.50));
//	SmartDashboard::PutData("Tilter50Up", new TilterSpeed(-0.50));
//	SmartDashboard::PutData("Tilter60Down", new TilterSpeed(0.60));
//	SmartDashboard::PutData("Tilter60Up", new TilterSpeed(-0.60));
//	SmartDashboard::PutData("TimedDiscKicker50", new TimedDiscKicker(0.5, 1.32));
//	SmartDashboard::PutData("TimedDiscKicker60", new TimedDiscKicker(0.6, 1.163));
//	SmartDashboard::PutData("TimedDiscKicker70", new TimedDiscKicker(0.7, 0.962));
//	SmartDashboard::PutData("TimedDiscKicker80", new TimedDiscKicker(0.8, 0.833));
//	SmartDashboard::PutData("TimedDiscKicker90", new TimedDiscKicker(0.9, 0.73));
//	SmartDashboard::PutData("TimedDiscKicker100", new TimedDiscKicker(1.0, 0.649));
//	SmartDashboard::PutData("TimedDriveStraight12", new TimedDriveStraight(0.5, 5.0));
//	SmartDashboard::PutData("ClimbALevel5", new ClimbALevel());
//	SmartDashboard::PutData("ThrowerOn3", new ThrowerOn());
//	SmartDashboard::PutData("ThrowerOff3", new ThrowerOff());
//	SmartDashboard::PutData("KickerSpeedOn4", new KickerSpeed(0.6));
//	SmartDashboard::PutData("KickerSpeedOff4", new KickerSpeed(0.0));
//	SmartDashboard::PutData("KickerSpeedRev4", new KickerSpeed(-0.6));
}
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
Joystick* OI::getJoystick2() {
	return joystick2;
}
Joystick* OI::getJoystick1() {
	return joystick1;
}
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
