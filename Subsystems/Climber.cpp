// RobotBuilder Version: 0.0.2
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in th future.
#include "Climber.h"
#include "../Robotmap.h"
Climber::Climber() :
	Subsystem("Climber"),
	m_movingForward(false),
	m_motorSpeed(0.0)
{
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	motor = RobotMap::climberMotor;
	airAssist = RobotMap::climberAirAssist;
	forwardLimit = RobotMap::climberForwardLimit;
	reverseLimit = RobotMap::climberReverseLimit;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
}
void Climber::InitDefaultCommand()
{
	// Set the default command for a subsystem here.
	//SetDefaultCommand(new MySpecialCommand());
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
}
void Climber::InitializeAndStartClimb(unsigned int speed)
{
	if (speed > 100)
	{
		speed = 100;
	}
	m_motorSpeed = speed / 100.0;
	m_movingForward = !m_movingForward;
	if (!m_movingForward)
	{
		m_motorSpeed = -m_motorSpeed;
	}
	SetSpeed();
	airAssist->Set(m_movingForward ? DoubleSolenoid::kForward : DoubleSolenoid::kReverse);
}
void Climber::SetSpeed()
{
	motor->Set(m_motorSpeed);
}
bool Climber::IsAtLimitSwitch()
{
	if (m_movingForward)
	{
		SmartDashboard::PutBoolean("forwardLimit", forwardLimit->Get());
		return !forwardLimit->Get();
	}
	else
	{
		SmartDashboard::PutBoolean("reverseLimit", reverseLimit->Get());
		return !reverseLimit->Get();
	}
}
void Climber::Stop()
{
	motor->Set(0.0);
}
